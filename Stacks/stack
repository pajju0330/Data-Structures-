stack works on LIFO , its a linear data structure.
LIFO = Last In First Out
1)used in functions calls
2)infix to postfix conversions
3)paranthesis matching and more
ADT - abstract data type
push() - psuh in the stack;
pop() - remove from the stack;
peek() - returns value at that index
is_empty() - nnav vachun kalalach asel



           |-----> pop out
|          |  |            
|          |  |
|_____________|             
|_____________|-->4 --> LIFO               
|_____________|-->3
|_____________|-->2
|_____________|-->1          

HOW TO IDENTIFY A STACK QUETION ?

    1)Array
    2)j is depended on i j = f(i)









                    Algorithm
                  
                    Monotonic stack
                    |--NS
                    |--NG
                    |--NS
                    |--NG
                    Greedy -->long term=>short ter
                    two pointe
                    sliding window
                    prefix array
                    |- Cummulitive sum
                    |- running sum
                    Binary Search
                    Sorting(1/2)
                    monotonic queue
                    enqueue
                    dequeue
                    priority_queue
                    Recurrsion
                    Backtracking
                    Dynamic Programming
                    hashing - map
                    rolling hash




MONOTONIC STACK


LIFO --> last in first out


monotonic --> cont inc/ cont inc
    ?????
j =>
j = f(i)
for(i 0 --> n)
    for(j)



---------->
1 5 6 3 2 4 
5 6 -1 4 4 -1 NGR
-1 3 3 2 -1 -1 NSR
-1 -1 -1 6 3 6 NGL          
 -1 1 5 1 1 2  NSL
 pop  ====> large or equal
 empty ===> -1    
|    |
|    |   
|    |   
|    |
|    |
|  4 |
|  6 |

-1 -1 2 3 3 -1
stack --> more than or equal to pop();
chote sample ==> top ==> NSR 
stack --> empty --> -1

