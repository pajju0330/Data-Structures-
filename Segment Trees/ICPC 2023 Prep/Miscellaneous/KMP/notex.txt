For string searching using KMP Algorithm
let's first understand what is "Longest proper prefix sufix array"

Proper prefix : All prefixs of an array/string excluding the array/string itself
i.e: proper prefixes of "abcd" are " ", "a","ab","abc"
suffix of "abcd" are " ","d","cd","bcd","abcd"

|| Longest proper prefix sufix array ||
is size of longest proper prefix which is also a suffix

examples:
"ababc" --> [0,0,1,2,0]
"aaaaa" --> [0,1,2,3,4]
"abcde" --> [0,0,0,0,0]

NOW!!

A normal Algorithm will take TC O(n^3)
that's where KMP play's role (lmao works in O(n))
the basic idea is, precomputation !!
-->(A)if len = lps[i-1] and str[len] and str[i] are same, then lps[i] = len+1 .
-->(B) if len != lps[i-1]
    -->(B1)if len = 0 then lps[i] = 0
    -->(B2)else recursively len = lps[len-1] until(str[i] == str[len])

example ::
str[] = aaaa
lps[] = 0 1 2 3 
i = 0: len = 0 lps = 0
i = 1:str[i] == str[len] so lps[i] = lps[i-1]+1 = 0+1 = 1
i = 2:str[i] == str[len] so lps[i] = lps[i-1]+1 = 1+1 = 2
i = 3:str[i] == str[len] so lps[i] = lps[i-1]+1 = 2+1 = 3


Revision link: https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/?ref=lbp
